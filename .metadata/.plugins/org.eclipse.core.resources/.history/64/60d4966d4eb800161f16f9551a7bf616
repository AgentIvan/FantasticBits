import java.util.List;


class Entity extends Point implements Cloneable{
	protected int id;
	protected double vx;
	protected double vy;
	protected int state;
	protected double friction;
	protected int radius;
	protected int type; //0 for wizards, 1 for snaffles, 2 for bludger
	private Entity snaffleCarried;
	
	public int getType() {
		return type;
	}

	public void setType(int type) {
		this.type = type;
	}

	protected double mass;
	
	
	public Entity(double x, double y) {
		super(x,y);
	}
	
	public Entity(int id, double x, double y, double vx, double vy) {
		super(x,y);
		this.id = id;
		this.vx = vx;
		this.vy = vy;
	}
	
	public Entity(int id, double x, double y, double vx, double vy, int state) {
		this(id, x, y, vx, vy);
		this.state = state;
	}
	
	public Entity(int id, double x, double y, double vx, double vy, int state, double friction, int radius, int type, double mass) {
		this(id, x, y, vx, vy);
		this.state = state;
		this.friction = friction;
		this.radius = radius;
		this.type = type;
		this.mass = mass;
	}
	
	public void setSnaffleCarried(Entity snaffle) {
		snaffleCarried = snaffle;
	}

	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public double getVx() {
		return vx;
	}

	public void setVx(int vx) {
		this.vx = vx;
	}

	public double getVy() {
		return vy;
	}

	public void setVy(int vy) {
		this.vy = vy;
	}
	
	public Entity searchNearestEntity(List<Entity> snaffles) {
		double minDistance = Integer.MAX_VALUE;
		Entity nearestEntity = null;
		
		for(Entity snaffle : snaffles) {
			double newDistance = computeDistanceSquare(snaffle);
			if(newDistance < minDistance) {
				minDistance = newDistance;
				nearestEntity = snaffle;
			}
		}
		
		return nearestEntity;
	}
	
	/**
	 * Search nearest snaffle except the snaffle with input id
	 * @param snaffles
	 * @param id
	 * @return
	 */
	public Entity searchNearestEntityExcept(List<Entity> snaffles, int id) {
		double minDistance = Integer.MAX_VALUE;
		Entity nearestEntity = null;
		
		for(Entity snaffle : snaffles) {
			double newDistance = computeDistanceSquare(snaffle);
			if(snaffle.getId()!=id && newDistance < minDistance) {
				minDistance = newDistance;
				nearestEntity = snaffle;
			}
		}
		
		return nearestEntity;
	}
	
	public double computeDistanceSquare(Entity entity) {
		return (this.getX()-entity.getX())*(this.getX()-entity.getX()) + (this.getY()-entity.getY())*(this.getY()-entity.getY());
	}
	
	
	public boolean isUsefulToAccio(Entity entity, Entity goal) {
		if(this.isBetweenInX(entity, goal) && computeDistanceSquare(entity)>4000000) {
			return true;
		}
		return false;
	}
	
	public void update(int x, int y, int vx, int vy) {
		this.x = x;
		this.y = y;
		this.vx = vx;
		this.vy = vy;
	}
	
	public Point computeNextPositionInNbTour(int nbTour) {
		double tempX = this.getX();
		double tempY = this.getY();
		double tempVx = this.vx;
		double tempVy = this.vy;
		
		for(int i=0; i<nbTour; i++) {
			
			tempX += tempVx;
			tempY += tempVy;
			
			//TODO: Check collision with wall (impulsion)
			if(tempX + radius >16000) {
				if(this.type == 1 && this.isInGoal(tempY)) {
					tempX=16000;
					tempVx=0;
					tempVy=0;
				} else {
					tempX = 2*16000 -2*radius - tempX;
					tempVx = -tempVx;
				}

			} else {
				if(tempX - radius<0) {
					if(this.type == 1 && this.isInGoal(tempY)) {
						tempX=0;
						tempVx=0;
						tempVy=0;
					} else {
						tempX = 2*radius -tempX;
						tempVx = -tempVx;
					}
				}
			}
			
			//TODO: Check collision with wall (impulsion)
			if(tempY + radius >7500) {
				tempY = 2*7500 -2*radius - tempY;
				tempVy = -tempVy;
			} else {
				if(tempY - radius<0) {
					tempY = 2*radius -tempY;
					tempVy = -tempVy;
				}
			}
			
			tempVx = tempVx * friction;
			tempVy = tempVy * friction;
			
		}
		

		
		Point newPosition = new Point(tempX, tempY);
		return newPosition;
	}
	
	public boolean isInGoal(double py) {
		if(py>1900 && py<5600) {
			return true;
		}
		
		return false;
	}
	
	public void stop() {
		this.vx = 0;
		this.vy = 0;
	}
	
	public Collision collision(Entity entity) {
		
		// Square of the distance
		double dist = this.distance2(entity);

	    // Sum of the radii squared
	    double sr = (this.radius + entity.radius)*(this.radius + entity.radius);

	    // We take everything squared to avoid calling sqrt uselessly. It is better for performances

	    if (Math.round(dist) + 10 < sr) {
	    	System.err.println("ID " + id);
	    	System.err.println("Dist " + dist);
	    	System.err.println("Sr " + sr);
	    	
	        // Objects are already touching each other. We have an immediate collision.
	        return new Collision(this, entity, 0.0);
	    }

	    // Optimisation. Objects with the same speed will never collide
	    if (this.vx == entity.vx && this.vy == entity.vy) {
	        return null;
	    }

	    // We place ourselves in the reference frame of u. u is therefore stationary and is at (0,0)
	    double x = this.x - entity.x;
	    double y = this.y - entity.y;
	    Point myp = new Point(x, y);
	    double vx = this.vx - entity.vx;
	    double vy = this.vy - entity.vy;
	    Point up = new Point(0, 0);

	    // We look for the closest point to u (which is in (0,0)) on the line described by our speed vector
	    Point p = up.closest(myp, new Point(x + vx, y + vy));

	    // Square of the distance between u and the closest point to u on the line described by our speed vector
	    double pdist = up.distance2(p);

	    // Square of the distance between us and that point
	    double mypdist = myp.distance2(p);

	    // If the distance between u and this line is less than the sum of the radii, there might be a collision
	    if (pdist < sr) {
	     // Our speed on the line
	        double length = Math.sqrt(vx*vx + vy*vy);

	        // We move along the line to find the point of impact
	        double backdist = Math.sqrt(sr - pdist);
	        p.x = p.x - backdist * (vx / length);
	        p.y = p.y - backdist * (vy / length);

	        // If the point is now further away it means we are not going the right way, therefore the collision won't happen
	        if (myp.distance2(p) > mypdist) {
	            return null;
	        }

	        pdist = p.distance(myp);

	        // The point of impact is further than what we can travel in one turn
	        if (pdist > length) {
	            return null;
	        }

	        // Time needed to reach the impact point
	        double t = pdist / length;

	        return new Collision(this, entity, t);
	    }

	    return null;
	}
	
	
	void bounce(Entity entity) {
		
        double xDist = this.getX() - entity.getX() ;
        double yDist = this.getY() - entity.getY() ;
        double distSquared = xDist*xDist + yDist*yDist;

        double xVelocity = entity.getVx() - this.getVx();
        double yVelocity = entity.getVy() - this.getVy();
        double dotProduct = xDist*xVelocity + yDist*yVelocity;
        //Neat vector maths, used for checking if the objects moves towards one another.
        if(dotProduct > 0){
            double collisionScale = dotProduct / distSquared;
            double xCollision = xDist * collisionScale;
            double yCollision = yDist * collisionScale;
            //The Collision vector is the speed difference projected on the Dist vector,
            //thus it is the component of the speed difference needed for the collision.
            double combinedMass = this.mass + entity.mass;
            double collisionWeightA = 2 * entity.mass / combinedMass;
            double collisionWeightB = 2 * this.mass / combinedMass;
            this.vx = this.vx + collisionWeightA * xCollision;
            this.vy = this.vy + collisionWeightA * yCollision;
            entity.vx = entity.vx - collisionWeightB * xCollision;
            entity.vy = entity.vy - collisionWeightB * yCollision;
    		System.err.println("TEST Velocity After" + this.id + " : " + this.vx +" " + this.vy);
    		System.err.println("TEST Velocity After" + entity.id + " : " + entity.vx +" " + entity.vy);
        }
		
    }
	
	public void move(double t) {
	    this.x += this.vx * t;
	    this.y += this.vy * t;
	}
	
	public void print() {
		System.err.println(this.id + " POSITION " + (int) Math.round(x)  +" " + Math.round(y));
	}
	
	public void printAll() {
		System.err.println("Id: " + id);
		System.err.println("X: " + x);
		System.err.println("Y: " + y);
		System.err.println("Vx: " +vx);
		System.err.println("Vy: " +vy);
		System.err.println("State " +state);
		System.err.println("Radius " + radius);
		System.err.println("Type " +type);
	}

	public void addMovement(Movement movement) {
		
		this.vx += movement.vx/this.mass;
		this.vy += movement.vy/this.mass;
		
	}
	
	protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

	public Collision collisionWithWall() {
		

		Point[] borders = new Point[4];
		borders[0] = new Point(0,0);
		borders[1] = new Point(16000,0);
		borders[2] = new Point(16000, 7500);
		borders[3] = new Point(0, 7500);
		
		//We add radius in the direction of the Entity to be sur to have intersection with the border of circle and not only with center
		double dv = Math.sqrt(vx*vx+vy*vy);
		double addX = 0;
		double addY = 0;
		if(dv > 0) {
			addX = radius*vx/dv;
			addY = radius*vy/dv;
		}
		
		Point nextPosition = new Point(x+vx+addX,y+vy+addY);
		Collision collision = null;
		
		for(int i=0; i<4; i++) {
			
			int j = i+1;
			if(j>=4) {
				j=0;
			}
			
			Point p1 = this.closest(borders[i], borders[j]);
			Point a = this.intersection(nextPosition, borders[i], borders[j]);
			if(a!=null) {
				
				
	    		double normAc = this.distance(a);
	    		double normP1c = this.distance(p1);
	    		double normV = this.distance(nextPosition);
	    		
	    		double p2X = a.x - radius * (normAc/normP1c) * this.vx / normV;
	    		double p2Y = a.y - radius * (normAc/normP1c) * this.vy / normV;
	    		
	    		Point p2 = new Point(p2X, p2Y);
	    		System.err.println("Point a: " + a.x +" " + a.y);
	    		System.err.println("Point of intersection: " + p2X +" " + p2Y);
	    		
	    		double t = distance(p2)/normV;
	    		
	    		if(collision == null || t<collision.t ) {
		    		// Create a wall : a circle with radius=0 and weight ~= Infinity
		    		Entity wallEntity = new Entity(-1,a.x,a.y,0,0,0,0,0,-1,10000000);
		    		collision = new Collision(this, wallEntity, t);
	    		}
			}
		}
		
			return collision;
	}
	
	/*Point checklinescollide(float x1, float y1, float x2, float y2, 
            float x3, float y3, float x4, float y4){
		float A1 = y2-y1;
		float B1 = x1-x2;
		float C1 = A1*x1 + B1*y1;
		float A2 = y4-y3;
		float B2 = x3-x4;
		float C2 = A2*x3 + B2*y3;
		float det = A1*B2-A2*B1;
		if(det != 0){
		    float x = (B2*C1 - B1*C2)/det;
		    float y = (A1*C2 - A2*C1)/det;
		    if(x >= Math.min(x1, x2) && x <= Math.max(x1, x2) 
		                    && x >= Math.min(x3, x4) && x <= Math.max(x3, x4)
		                    && y >= Math.min(y1, y2) && y <= Math.max(y1, y2) 
		                    && y >= Math.min(y3, y4) && y <= Math.max(y3, y4))
		            return new Point(x, y);
		}
		return null;
	}*/
	
}
