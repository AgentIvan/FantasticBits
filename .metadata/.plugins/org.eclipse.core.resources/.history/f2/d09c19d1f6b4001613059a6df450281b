import java.util.*;
import java.io.*;
import java.math.*;


/**
 * Grab Snaffles and try to throw them through the opponent's goal!
 * Move towards a Snaffle and use your team id to determine where you need to throw it.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int myTeamId = in.nextInt(); // if 0 you need to score on the right of the map, if 1 you need to score on the left
        int magic = 0;
        Entity[] goals = new Entity[2];

        goals[0] = new Entity(16000, 3750); //Right goal center
        goals[1] = new Entity(0, 3750); //Left goal center
        
        Point[] topGoalPoints = new Point[2];
        topGoalPoints[0] = new Point(16000,1750);
        topGoalPoints[1] = new Point(0,1750);
        
        Point[] bottomGoalPoints = new Point[2];
        bottomGoalPoints[0] = new Point(16000,5750);
        bottomGoalPoints[1] = new Point(0,5750);
        
        // game loop
        while (true) {
            
            List<Entity> wizards = new ArrayList<Entity>();
            List<Entity> opponentWizards = new ArrayList<Entity>();
            List<Entity> snaffles = new ArrayList<Entity>();
            
            int entities = in.nextInt(); // number of entities still in game
            
            
            for (int i = 0; i < entities; i++) {
                int entityId = in.nextInt(); // entity identifier
                String entityType = in.next(); // "WIZARD", "OPPONENT_WIZARD" or "SNAFFLE" (or "BLUDGER" after first league)
                int x = in.nextInt(); // position
                int y = in.nextInt(); // position
                int vx = in.nextInt(); // velocity
                int vy = in.nextInt(); // velocity
                int state = in.nextInt(); // 1 if the wizard is holding a Snaffle, 0 otherwise
                
                Entity newEntity = new Entity(entityId,x,y,vx,vy,state);
                
                switch (entityType) {
				case "WIZARD":
					wizards.add(newEntity);
					break;
				case "OPPONENT_WIZARD":
					opponentWizards.add(newEntity);
					break;
				case "SNAFFLE":
					snaffles.add(newEntity);
					break;
				case "BLUDGER":
					break;
				default:
					break;
				}
                
            }
            
            int chasestSnaffleId = -1;
            
            for(Entity wizard : wizards) {
            	
            	
                if(wizard.getState() == 0) {
                    Entity nearestSnaffle = wizard.searchNearestSnaffleExcept(snaffles, chasestSnaffleId);
                    
                    Point wizardNextPosition = wizard.computeNextPosition();
                    Point snaffleNextPosition = nearestSnaffle.computeNextPosition();
                    
                    if(magic >= 20 && wizard.isUsefulToAccio(nearestSnaffle, goals[myTeamId])){
                    	actio(nearestSnaffle);
                    	magic-=20;
                    } else if(magic >=20 && 
                    		lineLineIntersect(wizardNextPosition, snaffleNextPosition, topGoalPoints[myTeamId], bottomGoalPoints[myTeamId] )){
                    	flipendo(nearestSnaffle);
                    	
                    	System.err.println("Wizard next pos:");
                    	wizardNextPosition.print();
                    	System.err.println("Snaffle next pos:");
                    	snaffleNextPosition.print();
                    	
                    	
                    	magic-=20;
                    } else {
                        moveTo(nearestSnaffle, 100);
                    }
                    
                    chasestSnaffleId = nearestSnaffle.getId();
                } else {
                    throwTo(goals[myTeamId], 500);
                }
                

                
            }
            magic++;
            
        }
    }
    
    public static void moveTo(Entity entity, int power) {
        System.out.print("MOVE ");
        System.out.print(entity.getX());
        System.out.print(" ");
        System.out.print(entity.getY());
        System.out.print(" ");
        System.out.println(power);
    }
    
    public static void throwTo(Entity entity, int power) {
        System.out.print("THROW ");
        System.out.print(entity.getX());
        System.out.print(" ");
        System.out.print(entity.getY());
        System.out.print(" ");
        System.out.println(power);
    }
    
    public static void actio(Entity entity) {
    	System.out.print("ACCIO ");
        System.out.println(entity.getId());
    }
    
    public static void flipendo(Entity entity) {
    	System.out.print("FLIPENDO ");
        System.out.println(entity.getId());
    }
    
    /**
     * Check if segment [Point1, Point2] intersect PERPANDICULAR segment [Point3, Point4] (the goal)
     * 
     * WARNING Point3.y has to be inferior to Point4.y
     * 
     * @param point1 the wizard
     * @param point2 the snaffle
     * @param point3 the top goal
     * @param point4 the bottom goal
     * @return
     */
    public static boolean lineLineIntersect(Point point1, Point point2, Point point3, Point point4) {
    	if(point2.isBetweenInX(point1, point3)) {
	    	double a= ((double)(point2.getY()-point1.getY()))/((double)(point2.getX()- point1.getX()));
	    	double b= point1.getY() - a*point1.getX();
	    	
	    	System.err.println("a: " + a);
	    	System.err.println("b: " + b);
	    	
	    	double yTarget = a*point3.getX()+b;
	    	System.err.println("yTarget: " + yTarget);
	    	
	    	if(yTarget>point3.getY() && yTarget<point4.getY()) {
	    		return true;
	    	}
        }
    	return false;
    }

}